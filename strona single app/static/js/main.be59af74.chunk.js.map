{"version":3,"sources":["components/ConfigPanel.js","components/mobile_panels/PetItem.js","components/mobile_panels/PanelFullMsg.js","util/AppStates.js","components/mobile_panels/PetItemDetail.js","components/Mobile.js","components/MessagePanel.js","service/ServiceReturn.js","service/ServicePet.js","App.js","serviceWorker.js","index.js"],"names":["ConfigPanel","props","state","newUrl","updateURL","bind","handleNewURL","e","this","setState","target","value","addNew","className","type","onChange","placeholder","onClick","React","Component","PetItem","Array","isArray","items","map","item","key","id","name","loadPetDetail","PanelFullMsg","header","msg","APP_STATES","PetItemDetail","console","log","capacity","reloadAllPets","Mobile","details","appState","MessagePanel","ServiceReturn","message","json","ServicePet","url","isURLValid","fetch","catch","err","response","status","data","test","App","loadAllPets","apiUrl","baseUrl","statusmsg","typeLoad","getData","then","handleResult","handleError","endsWith","res","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.be59af74.chunk.js","sourcesContent":["import React from 'react';\n\nclass ConfigPanel extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            newUrl: ''\n        }\n\n        this.updateURL = this.updateURL.bind(this);\n        this.handleNewURL = this.handleNewURL.bind(this);\n    }\n\n    updateURL(e) {\n        this.setState({\n            newUrl: e.target.value\n        })\n    }\n\n    handleNewURL() {\n        this.props.addNew(this.state.newUrl);\n    }\n\n\n    render() {\n        return (\n            <div className=\"config-item\">\n                <h2>Configure your App</h2>\n\n                <h3>Amazon API Gateway</h3>\n\n \n                <div className='config-item-input'>\n                    <input\n                        type=\"text\"\n                        value={this.state.updateURL}\n                        onChange={this.updateURL}\n                        placeholder=\"https://invokeurl/prod/vehicles\"\n                    />\n                </div>\n                \n\n                <h6>Format: https://restapi_id.execute-api.region.amazonaws.com/stage_name/vehicles</h6>\n                <br/>\n                <button onClick={this.handleNewURL}>Load Backend Data</button>\n            </div>\n        )\n    }\n}\n\nexport default ConfigPanel;","import React from 'react';\n\nclass PetItem extends React.Component {\n    \n    render() {\n        return (\n            <div className=\"mobile-container\">\n               {Array.isArray(this.props.items) && this.props.items.map(item => (\n                   \n                <div key={item.id} className=\"mobile-item\">\n                    <h2>{item.name} </h2>\n                    <div className=\"mobile-item-detail\">\n                       <div className=\"mobile-item-id\">\n                           <strong>ID</strong> {item.id}\n                       </div>\n                       <div className=\"mobile-item-type\">\n                           <strong>Type</strong>  {item.type} \n                       </div>\n                       <button className=\"mobile-item-button\" onClick={this.props.loadPetDetail.bind(this, item.id)}>Details</button>\n                    </div>\n                </div>\n\n                ))}\n                \n            </div>\n        )\n    }\n}\n\nexport default PetItem;","import React from 'react';\n\nclass PanelFullMsg extends React.Component {\n\n\n    render(){\n        return(\n            <div className=\"mobile-container\">\n                <div className=\"mobile-item\">\n                   <h2>{this.props.header}</h2>\n                   <p>{this.props.msg}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default PanelFullMsg;","export const APP_STATES = {\n    UNSET: 'UNSET',\n    LOADING: 'LOADING',\n    LOADED: 'LOADED',\n    MOCK: 'MOCK',\n    URL_INVALID: 'URL_INVALID',\n    URL_FORBIDDEN: 'URL_FORBIDDEN',\n    URL_NO_CORS: 'URL_NO_CORS',\n    INTERNAL_SERVER_ERROR: 'INTERNAL_SERVER_ERROR',\n    FIND_ALL: 'FIND_ALL',\n    FIND_DETAIL: 'FIND_DETAIL',\n    ERROR: 'ERROR',\n    DETAILS: 'DETAILS'\n  }","import React from 'react';\n\nclass PetItemDetail extends React.Component {\n    \n    render() {\n\n        console.log(\"Props ===> \", this.props.items);\n        return (\n            <div className=\"mobile-container\">\n\n                \n             <div key={this.props.item.id} className=\"mobile-item\">\n                 <h2>{this.props.item.name} </h2>\n                 <div className=\"mobile-item-detail\">\n                    <div className=\"mobile-item-id\">\n                        <strong>ID</strong> {this.props.item.id}\n                    </div>\n                    <div className=\"mobile-item-type\">\n                        <strong>Type</strong>  {this.props.item.type} \n                    </div>\n                    <div className=\"mobile-item-fur\">\n                        <strong>Capacity</strong>  {this.props.item.capacity} \n                    </div>\n                    <button className=\"mobile-item-button\" onClick={this.props.reloadAllPets}>Back</button>\n                 </div>\n             </div>\n\n\n             \n         </div>\n        )\n    }\n}\n\nexport default PetItemDetail;","import React from 'react';\nimport PetItem from './mobile_panels/PetItem';\nimport PanelFullMsg from './mobile_panels/PanelFullMsg';\nimport { APP_STATES } from '../util/AppStates';\nimport PetItemDetail from './mobile_panels/PetItemDetail';\n\n\nclass Mobile extends React.Component {\n    constructor(props){\n        super(props)\n\n        this.state = { \n            id: ''\n        }\n\n        this.details = this.details.bind(this)\n    }\n\n    details(id){\n        this.props.details(id)\n    }\n\n    render() {\n        switch (this.props.appState) {\n            case APP_STATES.UNSET:\n                return (\n                    <div>\n                       <PanelFullMsg header=\"Vehicle App\" msg=\"Please, configure the app backend API to fetch the data.\"/>\n                    </div>\n                )\n            case APP_STATES.LOADING:\n                return (\n                    <div>\n                        <PanelFullMsg header=\"Welcome to the Vehicle App\" msg=\"Loading...\"/>\n                    </div>\n                )\n            case APP_STATES.FIND_ALL:\n                return (\n                    <div>\n                        <PetItem items={this.props.items} loadPetDetail={this.props.loadPetDetail} />\n                    </div>\n                )\n            case APP_STATES.FIND_DETAIL:\n                    return (\n                        <div>\n                            <PetItemDetail item={this.props.item} reloadAllPets={this.props.reloadAllPets} />\n                        </div>\n                    )\n            case 'ERROR':\n                return (\n                    <div>\n                        <PanelFullMsg header=\"Attention\" msg=\"The Vehicle App couldn't fetch the data\"/>\n                    </div>\n                )\n            default:\n                return (\n                    <div>\n                         <PanelFullMsg header=\"Attention\" msg=\"The Vehicle App couldn't fetch the data\"/>\n                    </div>\n                )\n        }\n\n\n    }\n}\n\nexport default Mobile;","import React from 'react';\n\nclass MessagePanel extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2>Communication Status</h2>\n                <div className=\"code\">\n                    {this.props.msg}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MessagePanel;","\nexport default class ServiceReturn {\n    constructor(appState, message, json){\n        this.appState = appState;\n        this.message = message;\n        this.json = json;\n    }\n}\n\n","import { APP_STATES } from '../util/AppStates';\nimport ServiceReturn from './ServiceReturn';\n\nclass ServicePet {\n\n    async getData(url, type) {\n        console.log(\"url \", url, \" type\", type);\n        \n        if(!this.isURLValid(url)){\n            return new ServiceReturn(APP_STATES.URL_INVALID, 'URL Invalid '+url, null);\n        }\n\n        const response = await fetch(url)\n            .catch ( err => { \n                throw new ServiceReturn(APP_STATES.URL_NO_CORS, 'URL NO CORS FOR THIS CLIENT ' + url, null);\n            });\n\n        \n        if(response.status === 403){\n            return new ServiceReturn(APP_STATES.URL_FORBIDDEN, 'URL FORBIDDEN (403) ' + url, null);\n        }\n\n        if(response.status === 502 || response.status === 500){\n            return new ServiceReturn(APP_STATES.INTERNAL_SERVER_ERROR, 'INTERNAL SERVER ERROR  (502) or (500)' + url, null);\n        }\n\n        if ((response.status === 200 && response.type === 'cors')) {\n            const data = await response.json()\n            .catch(err => {\n                throw new ServiceReturn(APP_STATES.MOCK, 'MOCK Detect', null);\n            })\n\n            \n            if(type === 'findAll'){\n                return new ServiceReturn(APP_STATES.FIND_ALL, 'FIND ALL PETS', data);\n            }else if(type === 'findDetail'){\n                return new ServiceReturn(APP_STATES.FIND_DETAIL, 'FIND DETAIL', data);\n            }\n        }\n        \n    }\n\n    isURLValid(url) {\n        return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(url);\n    }\n}\n\n\n\nexport default ServicePet;","import React from 'react';\nimport './App.css';\nimport ConfigPanel from './components/ConfigPanel';\nimport Mobile from './components/Mobile';\nimport MessagePanel from './components/MessagePanel';\nimport ServicePet from './service/ServicePet';\nimport { APP_STATES } from './util/AppStates';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      apiUrl: '',\n      appState: APP_STATES.UNSET,\n      items: [],\n      statusmsg: '',\n      typeLoad: '',\n      baseUrl: ''\n    }\n\n    this.loadAllPets = this.loadAllPets.bind(this);\n    this.loadPetDetail = this.loadPetDetail.bind(this);\n    this.reloadAllPets = this.reloadAllPets.bind(this);\n  }\n\n\n  loadAllPets = (url) => {\n\n    this.setState((state) => ({\n      apiUrl: url,\n      baseUrl: url,\n      statusmsg: \"Loading from\\n\" + url,\n      typeLoad: 'findAll'\n    }))\n\n    const petService = new ServicePet();\n    const serviceReturn = petService.getData(url, 'findAll' );\n\n    serviceReturn\n      .then(this.handleResult)\n      .catch(this.handleError)\n  }\n\n  loadPetDetail = (id) => {\n    console.log(\"Dentro do LoadDetail\", id);\n    let url = this.state.apiUrl;\n    // URL can come with a final /\n    url.endsWith('/') ? url =  url + id : url = url + '/' + id;\n    \n    this.setState((state) => ({\n      apiUrl: url,\n      statusmsg: \"Loading from\\n\" + url,\n      typeLoad: 'findDetail'\n    }))\n\n    const petService = new ServicePet();\n    const serviceReturn = petService.getData(url, 'findDetail' );\n\n    serviceReturn\n      .then(this.handleResult)\n      .catch(this.handleError)\n  }\n\n  reloadAllPets = () => {\n    const url = this.state.baseUrl;\n    this.loadAllPets(url);\n  }\n\n  handleResult = (res) => {\n    console.log(\"APP ===>\", res);\n    const url = this.state.apiUrl;\n    \n\n    if (res.appState === APP_STATES.URL_INVALID) {\n      console.log(\"URL INVALID => \", res.message);\n      this.setState({\n        appState: APP_STATES.ERROR,\n        statusmsg: `\\\"${url}\\\" is not a valid url`\n      });\n    }\n\n    if (res.appState === APP_STATES.URL_FORBIDDEN) {\n      console.log(\"URL FORBIDDEN (403)\", res.message);\n      this.setState({\n        appState: APP_STATES.ERROR,\n        statusmsg: `This app is not allowed to communicate with this url \\n\\nGETS \\n${url}\\nStatus: 502 \\nBody: {\"message\":\"Missing Authentication Token\"}`\n      });\n    }\n\n    if (res.appState === APP_STATES.INTERNAL_SERVER_ERROR) {\n      console.log(\"INTERNAL SERVER ERROR  (502)\", res.message);\n      this.setState({\n        appState: APP_STATES.ERROR,\n        statusmsg: `The App received a Internal Server Error from Server, \\nverify your backend.\\n\\nGET \\n${url}\\nStatus: 500 \\nBody: {\"message\": \"Internal server error\"}`\n      });\n    }\n\n\n    if (res.appState === APP_STATES.FIND_ALL) {\n      this.setState({\n        appState: APP_STATES.FIND_ALL,\n        statusmsg: `The App received data from the API. \\n\\nGET \\n${url}\\nStatus: 200 \\nBody: ${JSON.stringify(res.json, null, 2)}`,\n        items: res.json\n      });\n    }\n\n    if (res.appState === APP_STATES.FIND_DETAIL) {\n      this.setState({\n        appState: APP_STATES.FIND_DETAIL,\n        statusmsg: `The App received data from the API. \\n\\nGET \\n${url}\\nStatus: 200 \\nBody: ${JSON.stringify(res.json, null, 2)}`,\n        item: res.json\n      });\n    }\n\n    return res;\n  }\n\n  handleError = (err) => {\n    const url = this.state.apiUrl;\n    console.log(\"ERRO => \", err);\n    \n\n        if (err.appState === APP_STATES.MOCK) {\n          console.log(\"ACTION MOCK (200) No JSON\");\n          this.setState({\n            appState: APP_STATES.MOCK,\n            statusmsg: `The App received a response from the API, but the data \\nis empty.\\n\\nGET \\n${url}\\nStatus: 200 \\nBody: Empty`\n          });\n        }\n\n        if (err.appState === APP_STATES.URL_NO_CORS) {\n          console.log(\"NO CORS FOR THIS CLIENT \" + err.message);\n          this.setState({\n            appState: APP_STATES.ERROR,\n            statusmsg: `This app is not allowed to communicate with this url \\n\\nGET \\n${url}\\nStatus: 502 \\nBody: {\"message\":\"Missing Authentication Token\"}`\n          });\n        }\n  }\n\n  componentDidMount() {\n    this.setState({\n      statusmsg: \"Loading ....................OK \\n\\nWaiting for the configuration.\"\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"app-container\">\n        <div className=\"config\">\n          <ConfigPanel addNew={this.loadAllPets} />\n        </div>\n        <div className=\"message\">\n          <MessagePanel appState={this.state.appState} msg={this.state.statusmsg} />\n        </div>\n\n        <div className=\"mobile\">\n          <div className=\"mobile__screen\">\n            <div className=\"mobile__scroll-cont\">\n              <div className=\"mobile_content\">\n                <Mobile appState={this.state.appState} items={this.state.items} item={this.state.item} loadPetDetail={this.loadPetDetail} reloadAllPets={this.reloadAllPets}/>\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    )\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}